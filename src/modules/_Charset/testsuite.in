// $Id$

// _Charset.decoder
test_true([[objectp(_Charset)]])
test_true([[functionp(_Charset.decoder)]])
test_true([[objectp(_Charset.decoder("latin1"))]])
test_true([[functionp(_Charset.decoder("latin1")->feed)]])
test_eq([[_Charset.decoder("latin1")->feed("xyzåäö¤ß¶")->drain()]],"xyzåäö¤ß¶")

// _Charset.rfc1345
test_eq([[_Charset.decoder("iso646-se")->feed("}{|][\\")->drain()]],"åäöÅÄÖ")
test_eq([[_Charset.decoder("iso-ir-126")->feed("abcåäö")->drain()]],
	"abc\x3b5\x3b4\x3c6")

// _Charset.ISO2022
test_eq([[_Charset.decoder("iso-2022")->
	feed("\033-Aeäv\016ed\017v\033$(BF|K\\\033(Bfoo")->drain()]],
	"eävåäv\x65e5\x672c""foo")

// _Charset.UTF7
test_eq([[_Charset.decoder("utf-7")->
	feed("foobar+-xy-+--z+AOUA5AD2!+ZeVnLA-X")->drain()]],
	"foobar+xy-+-zåäö!\x65e5\x672cX")

// _Charset.UTF8
test_eq([[_Charset.decoder("utf-8")->feed("Ã¥Ã¤Ã¶")->drain()]],"åäö")

test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xc0\x80")->drain())
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xc1\xbf")->drain())
test_eq(_Charset.decoder ("utf-8")->feed ("\xc2\x80")->drain(), "\x80")
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xe0\x80\x80")->drain())
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xe0\x9f\xbf")->drain())
test_eq(_Charset.decoder ("utf-8")->feed ("\xe0\xa0\x80")->drain(), "\x800"))
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xf0\x80\x80\x80")->drain())
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xf0\x8f\xbf\xbf")->drain())
test_eq(_Charset.decoder ("utf-8")->feed ("\xf0\x90\x80\x80")->drain(), "\x10000")
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xf8\x80\x80\x80\x80")->drain())
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xf8\x87\xbf\xbf\xbf")->drain())
test_eq(_Charset.decoder ("utf-8")->feed ("\xf8\x88\x80\x80\x80")->drain(), "\x200000")
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xfc\x80\x80\x80\x80\x80")->drain())
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xfc\x83\xbf\xbf\xbf\xbf")->drain())
test_eq(_Charset.decoder ("utf-8")->feed ("\xfc\x84\x80\x80\x80\x80")->drain(), "\x4000000")
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xfe")->drain())
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xff")->drain())
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\x80")->drain())
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xcf\x3f")->drain())
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xcf\x7f")->drain())
test_eval_error(return _Charset.decoder ("utf-8")->feed ("\xcf\xff")->drain())

// _Charset.UTF16
test_eq([[_Charset.decoder("utf-16")->feed("\0h\0e\0j")->drain()]],"hej")
test_eq([[_Charset.encoder("utf-16")->feed("hej")->drain()]],"\0h\0e\0j")
